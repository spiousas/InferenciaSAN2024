# R y el tidyverse {#sec-intro_R}

```{r}
#| echo: false

source("../R/_common.R")
```

En la gran mayoría de las ejemplos y ejercicios de este libro vamos a usar una computadora (te quiero mucho Skynet ♥️). Con ella nos vamos a comunicar utilizando un lenguaje de programación muy popular en el campo de la estadística: R[@R2023]. Por eso mi recomendación es que lo que primero tenés que hacer es instalar R y RStudio. RStudio es una interfaz **muy** popular utilizada para, mayormente, programar en R. En el recuadro siguiente van a encontrar información de cómo instalar ambas cosas.

::: callout-tip
## Instalación de R y RStudio

Lo primero que hay que hacer para poder correr scripts de R es, como resulta evidente, instalar R. Lo pueden hacer seleccionando su sistema operativo en este [link](http://mirror.fcaglp.unlp.edu.ar/CRAN/) y siguiendo los pasos de la instalación.

Pueden bajar la versión gratuita de RStudio del siguiente [link](https://www.rstudio.com/products/rstudio/download/#download). En caso de que el link no haya detectado correctamente el sistema operativo, en la sección *All Installers* pueden seleccionarlo manualmente. Una vez descargado el instalador sólo hay que seguir los pasos de la intalación.
:::

Si bien la mayoría de las cosas que vamos a ahcer en este libro se pueden hacer con funciones de R base[^intro_r-1], la propuesta es utilizar los paquetes y funciones del *tidyverse*. El *tidyverse* es una colección de paquetes diseñados para el campo de la ciencia de datos y que comparten una filosofía de diseño subyacente, una gramática y una estructura de datos[@wickham2019welcome]. Tranquilos que en la sección siguiente se va a ir aclarando la cosa.

[^intro_r-1]: Es decir, sin tener que cargar ningún paquete de funciones adicional.

## Tidy data

Lo primero que tenemos que pensar cuando trabajamos con el *tidyverse* es que nuestros datos estén en formato *tidy*. ¿Qué significa esto? Cuando un *dataset* está en formato *tidy*, cada columna corresponde a una variable y cada fila a una única observación[^wide]. Veamos un ejemplo. Tenemos tres sujetos a los cuales les medimos el tiempo de respuesta en una tarea. Cada sujeto realiza dos repeticiones de esta medición, el *trial 1* y el *trial 2*. En la tabla @tbl-ejemplo podemos ver las dos formas de organizar esta información.

[^wide]: El caso contrario sería en el que una fila contiene varios mediciones para distintos niveles de una variable. Este formato se conoce como *wide*.

```{r}
#| echo: false
#| label: tbl-ejemplo
#| tbl-cap: "Ejemplo de tablas tidy y wide."
#| tbl-subcap: 
#|   - "Tidy"
#|   - "Wide"
#| layout-ncol: 2

library(knitr)
tibble(sujeto = rep(c("Jerry", "Elaine", "George"), each = 2),
       trial  = rep(c(1, 2), times = 3),
       tiempo_respuesta = runif(6)) %>%
  kbl() %>%
  kable_styling(font_size = 14)

tibble(sujeto  = rep(c("Jerry", "Elaine", "George")),
       trial_1 = runif(3),
       trial_2 = runif(3)) %>%
  kbl() %>%
  kable_styling(font_size = 14)
```

A lo largo de este capítulo iremos viendo los beneficios de almacenar los datos en formato *tidy*. Por supuesto que estas ventajas tienen su precio, principalemente que las bases de datos crecen mucho en tamaño si tenemos muchas medidas repetidas con distintos valores de las variables.

## Introducción al Tidyverse

Como contamos más arriba, el *tidyverse* es una colección cerca de 25 paquetes, todos relacionados con la carga, manejo, modificación y visualización de datos. La idea de este libro no es profundizar en todas sus capacidades pero consideramos importante presentar algunas de las funciones que más vamos a utilizar a lo largo del libro. Estas son funciones para leer datos del paquete *{readr}*, los verbos de *{dplyr}* para manipularlos, las funciones de *{tidyR}* para acomodarlos y el poderosísimo *{ggplot2}* para visualizarlos.

### Cargando datos con *readr*

Una de las cosas que vamos a hacer más a menudo en este libro es cargar algún dataset. Para esto vamos a usar varias de las funcionalidades del paquete *{readr}*.

El caso más simple al que nos vamos a enfrentar es la carga de una base de datos organizada en columnas y separadas por comas en un archivo de extensión *.csv*. En este caso lo que tenemos que hacer es bastante simple, usar la función *read_csv()* como a continuación:

```{r}
#| message: false
summer <- read_csv("../data/summer.csv")
```

Podemos ver que al cargar los datos `read_csv` nos dice que hay ocho columnas `chr` (o sea de texto) y una `dbl` (o sea, un número). Si usamos la función `summary` podemos ver un detalle de cada avriable con su tipo y alguna descripción[^summary]:

[^summary]: Existen alternativas para visualizar rápidamente un conjunto de datos como `str` o `glimpse` o la función `skim` del paquete *{skimr}*.

```{r}
#| message: false
summary(summer)
```

Los datos adentro de `summer.csv` son los ganadores de medallas en los juegos olímpicos de verano. Podemos ver algunas filas de muestra:

```{r}
#| message: false
head(summer)
```

El formato en el que `read_csv` almacena los datos se llama *tibble* y es el formato por excelencia del *tidyverse*. De momento lo único que nos importa es que es un formato que almacena los casos en filas y las variables en columnas (cada variable tiene un formato). Para más información sobre las cualidades de este formato, les recomiendo revisar la [documentación](https://tibble.tidyverse.org/).

### El operador *pipe* (\|\>) del paquete *{magrittr}*

El operador pipe nos permite concatenar funciones que utilizan como entrada los mismos datos. El principio de operación es el siguiente, supongan que nosotros queremos cargar un dataset y aplicarle la función summary. Esto lo podemos hacer simplemente cargando el dataset en una lìnea de código y ejecutanco la función summary() en la siguiente.

```{r}
#| message: false
data <- read_csv("../data/summer.csv")
summary(data)
```

Pero, también podemos aprovechar el operador pipe y hacer todo en una única línea de código.

```{r}
#| message: false
read_csv("../data/summer.csv") |> summary()
```

Al dejar vacío el paréntesis de la función summary(), la misma va a tomar como variable de entrada a la que está antes del operador pipe, es decir, a la que antes llamamos `data`. En el caso que la función summary() tuviera más de una variable de entrada, lo que viene antes del *pipe* tomaría el lugar de la primera de ellas.

Si bien esta funcionalidad parece algo que complica las cosas y que no trae demasiados beneficios con un ejemplo tan simple, más adelante veremos que puede ser de gran utilidad, ayudando a disminuir la cantidad de línes de código y de variables intermedias.

### *{dplyr}* y sus verbos

Una de las cosas más útiles del *tidyverse* para el tipo de procesamiento de datos que vamos a llevar a cabo en este libro son los verbos de dplyr. Estas funciones no permiten agregar columnas, resumir la información, filtrar filas, seleccionar columnas, etc[^tidiverse]. Y todas estas acciones las podemos hacer en la base de datos completa o en una parte de ella agrupada de acuerdo a algún criterio. Vayamos de a poco.

[^tidiverse]: Para más detalles sobre los verbos disponibles en el paquete *{dplyr}* pueden visital este la [página de referencia](https://dplyr.tidyverse.org/).

#### El verbo `filter`

Volvamos a los datos de los JJOO de verano. Supongamos que nos queremos quedar sólo con las medallas de Argentina. Para este tipo de filtrado de filas (o casos, o mediciones) *{dplyr}* tiene un verbo que se llama `filter` y funciona de la siguiente forma[^paquete]:

[^paquete]: Se preguntarán por qué antes de la función `filter` aparece un `::dplyr`. Esto es simplemente una forma de decirle a R que la función `filter` que debe utilizar es la del paquete *{dplyr}*. Esta es una práctica recomendable sobre todo para funciones con nombres comunes como `filter` o `select`.

```{r}
#| message: false
summer |> dplyr::filter(Country == "ARG") |> head(10)
```

Noten que estamos utilizando el operador `|>` para concatenar las acciones: Con los datos de `summer` hacemos el filtrado y, luego, mostramos las primeras diez filas de esos datos ya filtrados.

También podríamos quere quedarnos con las medallas de Argenitna en los JJOO de Atenas 2004, para esto debemos el operador lógico "y", cuyo símbolo en R es `&`:

```{r}
#| message: false
summer |> dplyr::filter(Country == "ARG" & Year == 2004) |> head(5)
```

Que linda esa Generación Dorada`r emo::ji("gold")`, ¿No?.Por otro lado, si nos queremos quedar con las medallas de Argentina o Brasil debemos utilizar el operador lógico "o", cuyo símbolo en R es `|`:

```{r}
#| message: false
summer |> dplyr::filter(Country == "ARG" | Country == "BRA") |> head(10)
```

Aunque, una alternativa muy útil cuando tenemos los valores de una variable que queremos filtrar en un *array* es:

```{r}
summer |> dplyr::filter(Country %in% c("ARG", "BRA")) |> head(10)
```

Finalmente, si tenemos una variable numérica, podemos filtrar con condiciones como mayor o menor:

```{r}
#| message: false
summer |> dplyr::filter(Year > 2010) |> head(5)
```
#### El verbo `select`

El verbo `select` es similar a `filter` pero nos permite filtrar no casos sino variables. Por ejemplo, ¿Qué pasa si solo nos interesa el año, la ciudad y el nombre del atleta?:

```{r}
#| message: false
summer |> dplyr::select(c(Year, City, Athlete)) |> head(5)
```

#### El verbo `mutate`

Ahora las cosas se complican un poco. `mutate` es un verbo que nos permite crear nuevas columnas ya sea con datos nuevos o en función de los datos existentes. Por ejemplo, creemos una columna nueva que tenga un *chr* con el país, un guión y el nombre del atleta y llamémosla `nationality_athlete`. Nos vamos a quedar sólo con el año, la medalla que ganó y el nuevo nombre combinado con la nacionalidad:

```{r}
#| message: false
summer |> 
  dplyr::mutate(nationality_athlete = paste(Country, "-", Athlete)) |> 
  dplyr::select(c(Year, Medal, nationality_athlete)) |>
  head(5)
```

O, por ejemplo, podemos querer crear una variable que nos ponga un $1$ si es griego y un $0$ si no[^ifelse]:

[^ifelse]: Para más detalles sobre la función `if_else` pueden ver el siguiente [link](https://dplyr.tidyverse.org/reference/if_else.html).

```{r}
#| message: false
summer |> 
  dplyr::mutate(is_greek = if_else(Country == "GRE", 1, 0)) |> 
  dplyr::select(c(Year, Medal, Country, is_greek)) |>
  head(5)
```

Ahora vamos a aprender algo muy importante y *cool* `r emo::ji("cool")`: A agrupar los casos de acuerdo a una variable. Por ejemplo, si queremos agregar una columna que contenga la cantidad total de medallas ganadas por un país a cada atleta de ese país podemos hacer lo siguiente:

```{r}
#| message: false
summer |> 
  group_by(Country) |>
  dplyr::mutate(num_medals = n()) |> 
  dplyr::select(c(Year, Medal, Athlete, num_medals)) |>
  head(5)
```

¿Perdidos? Tomensé su tiepo para tratar de entender qué pasó y prueben distintas alternativas en sus computadoras.

#### El verbo `summarise`

Por último, el verbo `summarise` nos permite sacar medidas resumen de nuestros datos. Empecemos con algo obvio: ¿Cuántas medallas de oro ganó cada país en la historia de los juegos olímpicos?. Podemos hacer algo parecido a lo último que hicimos con `mutate` pero el resultados será ligeramente diferente[^arrange]:

[^arrange]: La función `arrange` nos ordena los datos de acuerdo a la variable que le enviemos como parámetro de menos a mayor. Si queremos que ordene de mayor a menor debemos agregar la función `desc` en el argumento. Más detalles [acá](https://dplyr.tidyverse.org/reference/arrange.html).

```{r}
#| message: false
summer |> 
  dplyr::filter(Medal == "Gold") |>
  group_by(Country) |>
  dplyr::summarise(num_medals = n()) |>
  arrange(desc(num_medals)) |>
  head(10)
```

Hay algo raro, ¿No? Bueno, sí, de esta forma estamos contando a todos los atletas que tuvieron la misma medalla (por ejemplo, si la medalla fue por fútbol estamos contando cerca de 30 medallas). Para resolver esto nos podemos sacar de encima los casos duplicados por año, deporte, disciplina, evento y género[^distinct]:

[^distinct]: La función `distinct` nos conserva una sola realización de cada caso que es igual de acuerdo a las variables que le pasemos como parámetros. Más detalles [acá](https://dplyr.tidyverse.org/reference/distinct.html). 

```{r}
#| message: false
summer |> 
  distinct(Year, Sport, Discipline, Event, Gender, .keep_all = TRUE) |>
  dplyr::filter(Medal == "Gold") |>
  group_by(Country) |>
  dplyr::summarise(num_medals = n()) |>
  arrange(desc(num_medals)) |>
  head(5)
```

Vayamos con lo último, calculemos la media y la desviación estándar de las medallas de Argentina por JJOO combinando todo lo que vimos.

```{r}
#| message: false
summer |> 
  distinct(Year, Sport, Discipline, Event, Medal, Gender, .keep_all = TRUE) |>
  dplyr::filter(Country == "ARG") |>
  group_by(Country, Year) |>
  dplyr::summarise(num_medals = n()) |>
  ungroup() |>
  summarise(media  = mean(num_medals),
            desvio = sd(num_medals))
```

Digieran esto tranquilos.

### *{tidyR}*, el paquete para ordenar tus datos

El paquete *{tidyR}* tiene muchas herramientas de manejo de tablas como reformatear, expandir tablas, manejar valores faltantes, dividir celdas, anidar datos, etc[^tidyr]. Sin embargo, en esta breve introducción sólo vamos a presentar muy brevemente las herramientas que nos permiten convertir una tabla *wide* en *tidy* (o *long*) y viceverse.

[^tidyr]: Para más información ver el [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/tidyr.pdf).

#### La función `pivot_longer`

Volvamos a la tabla iniicial que teníamos en formato wide:

```{r}
#| echo: true
#| message: false
tabla_wide <- tibble(sujeto  = rep(c("Jerry", "Elaine", "George")),
                     trial_1 = runif(3),
                     trial_2 = runif(3)) 

tabla_wide
```

Si nosotros quisiñeramos transformar esta tabla en una tabla en formato *tidy* podemos utilizar la función `pivot_longer`[^pivot_longer]. Veamos como funciona y después la desmenuzamos:

[^pivot_longer]: Más información [acá](https://tidyr.tidyverse.org/reference/pivot_longer.html).

```{r}
#| echo: true
#| message: false
pivot_longer(data = tabla_wide, 
             cols = trial_1:trial_2, 
             names_to = "trial",
             values_to = "tiempo_respuesta")
```

Los argumentos son los siguientes: `data` es la tabla a la que le vamos a realizar el cambio de formato; `cols` son las columnas que vamos a cambiar, en este caso desde `trial_1` a `trial_2`; en `names_to` indicamos la variable a la que vamos a mandar los nombres de las columnas actuales; y `values_to` la variables a la que vamos a mandar los valores.

Algo ligeramente raro es que la columna trial no es numérica y, sólo por completitud, lo vamos a solucionar usando a nuestro gran amigo `|>` y al verbo `mutate`[^parse_number]:

[^parse_number]: Y la función [`parse_number`](https://readr.tidyverse.org/reference/parse_number.html) del paquete *{readr}*.

```{r}
#| echo: true
#| message: false
pivot_longer(data = tabla_wide, 
             cols = trial_1:trial_2, 
             names_to = "trial",
             values_to = "tiempo_respuesta") |>
  mutate(trial = parse_number(trial))
```

#### La función `pivot_wider`

Ahora vamos con el caso contrario en el que tenemos una tabla en formato *long* y la queremos convertir en *wide*:

```{r}
#| echo: true
#| message: false
tabla_long <- pivot_longer(data = tabla_wide, 
                           cols = trial_1:trial_2, 
                           names_to = "trial",
                           values_to = "tiempo_respuesta") |>
  mutate(trial = parse_number(trial))

tabla_long
```

Para esto vamos a hechar mano a la función `pivot_wider`[^pivot_wider] que tiene una sintáxis parecida a su prima `pivot_longer`:

[^pivot_wider]: Más información [acá](https://tidyr.tidyverse.org/reference/pivot_wider.html).

```{r}
#| echo: true
#| message: false
pivot_wider(data = tabla_long, 
            names_from = trial, 
            values_from = tiempo_respuesta)
```

*Et Voilà!*, ya tenemos nuestra tabla en formato wide. En este caso le dijimos de que variable tomar los nombres de las nuevas columnas en `names_from` y de que variable tomar los valores en `values_from`.

Finalmente, y sólo para alimnetar nuestra obsesión, vamos a corregir los nombres de las columnas agregando el prefijo `trial_` utilizando el parámetro de la función `names_prefix`:

```{r}
#| echo: true
#| message: false
pivot_wider(data = tabla_long, 
            names_from = trial, 
            names_prefix = "trial_",
            values_from = tiempo_respuesta)
```

<!-- ### *{ggplot2}* o cómo hacer figuras que sean la envidia de tu compañero de escritorio -->

## Algunas palabras finales

Como vimos brevemente en este capítulo, los paquetes del *tidyverse* son una herramineta importantísima para el análisis de datos utilizando R. Para más detalles sobre estas funcionalidades les recomendamos la guía de Hadley Wickham[@wickham2019welcome] o, si ya se quieren sumergir de lleno en el mundo del análisis de datos con R, este fantástico libro [@wickham2023r][^intro_r-2]. Es decir, sin tener que cargar ningún paquete de funciones adicional..

[^intro_r-2]: Disponible gratis online en [acá](https://r4ds.had.co.nz/).
